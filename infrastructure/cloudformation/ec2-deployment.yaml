AWSTemplateFormatVersion: '2010-09-09'
Description: 'Twitch Chat MCP Server - EC2 Deployment'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  ProjectName:
    Type: String
    Default: 'twitch-chat-mcp'
    Description: 'Project name for resource naming'

  CoreStackName:
    Type: String
    Description: 'Name of the core infrastructure stack'
    Default: 'twitch-chat-mcp-core'

  InstanceType:
    Type: String
    Default: 't3.micro'
    AllowedValues: ['t3.micro', 't3.small', 't3.medium']
    Description: 'EC2 instance type'

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'EC2 Key Pair for SSH access'

  DomainName:
    Type: String
    Description: 'Domain name for the MCP server (optional)'
    Default: ''

Conditions:
  HasDomain: !Not [!Equals [!Ref DomainName, '']]

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316  # Amazon Linux 2023
    us-west-2:
      AMI: ami-008fe2fc65df48dac  # Amazon Linux 2023
    eu-west-1:
      AMI: ami-01dd271720c1ba44f  # Amazon Linux 2023

Resources:
  # Application Load Balancer
  MCPServerALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-alb'
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !ImportValue 
            Fn::Sub: '${CoreStackName}-SecurityGroupId'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # VPC for the deployment
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-vpc'
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-2'

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Launch Template
  MCPServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-${Environment}-template'
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !ImportValue 
            Fn::Sub: '${CoreStackName}-InstanceProfileArn'
        SecurityGroupIds:
          - !ImportValue 
              Fn::Sub: '${CoreStackName}-SecurityGroupId'
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y nodejs npm git docker
            
            # Install Node.js 18
            curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
            yum install -y nodejs
            
            # Start Docker
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Install CloudWatch agent
            yum install -y amazon-cloudwatch-agent
            
            # Create application directory
            mkdir -p /opt/twitch-chat-mcp
            cd /opt/twitch-chat-mcp
            
            # Clone repository (replace with your repo URL)
            git clone https://github.com/your-username/twitch-chat-mcp.git .
            
            # Install dependencies and build
            npm install
            npm run build
            
            # Get configuration from Parameter Store
            export AWS_REGION=${AWS::Region}
            export KMS_KEY_ID=${!ImportValue ${CoreStackName}-KMSKeyId}
            export CLOUDWATCH_LOG_GROUP=${!ImportValue ${CoreStackName}-LogGroupName}
            
            # Get secrets from Parameter Store
            export TWITCH_CLIENT_ID=$(aws ssm get-parameter --name "/${ProjectName}/${Environment}/twitch/client-id" --query "Parameter.Value" --output text)
            export TWITCH_CLIENT_SECRET=$(aws ssm get-parameter --name "/${ProjectName}/${Environment}/twitch/client-secret" --with-decryption --query "Parameter.Value" --output text)
            export JWT_SECRET=$(aws ssm get-parameter --name "/${ProjectName}/${Environment}/jwt/secret" --with-decryption --query "Parameter.Value" --output text)
            
            # Set other environment variables
            export PORT=3000
            export MCP_TRANSPORT=http
            export TWITCH_REDIRECT_URI=https://${DomainName}/auth/callback
            
            # Create systemd service
            cat > /etc/systemd/system/twitch-chat-mcp.service << EOF
            [Unit]
            Description=Twitch Chat MCP Server
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/twitch-chat-mcp
            Environment=NODE_ENV=production
            Environment=AWS_REGION=${AWS::Region}
            Environment=KMS_KEY_ID=${!ImportValue ${CoreStackName}-KMSKeyId}
            Environment=CLOUDWATCH_LOG_GROUP=${!ImportValue ${CoreStackName}-LogGroupName}
            Environment=PORT=3000
            Environment=MCP_TRANSPORT=http
            EnvironmentFile=/opt/twitch-chat-mcp/.env
            ExecStart=/usr/bin/node dist/src/index.js
            Restart=always
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Create environment file with secrets
            cat > /opt/twitch-chat-mcp/.env << EOF
            TWITCH_CLIENT_ID=$TWITCH_CLIENT_ID
            TWITCH_CLIENT_SECRET=$TWITCH_CLIENT_SECRET
            JWT_SECRET=$JWT_SECRET
            TWITCH_REDIRECT_URI=https://${DomainName}/auth/callback
            EOF
            
            # Set permissions
            chown -R ec2-user:ec2-user /opt/twitch-chat-mcp
            chmod 600 /opt/twitch-chat-mcp/.env
            
            # Start service
            systemctl daemon-reload
            systemctl enable twitch-chat-mcp
            systemctl start twitch-chat-mcp
            
            # Configure CloudWatch agent
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/messages",
                        "log_group_name": "${!ImportValue ${CoreStackName}-LogGroupName}",
                        "log_stream_name": "{instance_id}/system"
                      }
                    ]
                  }
                }
              }
            }
            EOF
            
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${ProjectName}-${Environment}-server'
              - Key: Environment
                Value: !Ref Environment
              - Key: Project
                Value: !Ref ProjectName

  # Auto Scaling Group
  MCPServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ProjectName}-${Environment}-asg'
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MCPServerLaunchTemplate
        Version: !GetAtt MCPServerLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref MCPServerTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-asg'
          PropagateAtLaunch: false
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref ProjectName
          PropagateAtLaunch: true

  # Target Group
  MCPServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-tg'
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ALB Listener
  MCPServerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MCPServerTargetGroup
      LoadBalancerArn: !Ref MCPServerALB
      Port: 80
      Protocol: HTTP

Outputs:
  LoadBalancerDNS:
    Description: 'Load Balancer DNS Name'
    Value: !GetAtt MCPServerALB.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'

  LoadBalancerURL:
    Description: 'Load Balancer URL'
    Value: !Sub 'http://${MCPServerALB.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerURL'

  VPCId:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'
