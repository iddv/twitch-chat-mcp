AWSTemplateFormatVersion: '2010-09-09'
Description: 'Twitch Chat MCP Server - Core Infrastructure (KMS, CloudWatch, IAM)'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  ProjectName:
    Type: String
    Default: 'twitch-chat-mcp'
    Description: 'Project name for resource naming'

Resources:
  # KMS Key for credential encryption
  CredentialEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub '${ProjectName} - Credential Encryption Key'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key for encryption/decryption
            Effect: Allow
            Principal:
              AWS: !GetAtt MCPServerRole.Arn
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # KMS Key Alias
  CredentialEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-${Environment}-credentials'
      TargetKeyId: !Ref CredentialEncryptionKey

  # CloudWatch Log Group
  MCPServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/mcp/${ProjectName}-${Environment}'
      RetentionInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for MCP Server
  MCPServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-server-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
      Policies:
        - PolicyName: KMSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:ReEncrypt*'
                  - 'kms:GenerateDataKey*'
                  - 'kms:DescribeKey'
                Resource: !GetAtt CredentialEncryptionKey.Arn
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: !GetAtt MCPServerLogGroup.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Instance Profile for EC2
  MCPServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectName}-${Environment}-instance-profile'
      Roles:
        - !Ref MCPServerRole

  # Security Group for MCP Server
  MCPServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-sg'
      GroupDescription: 'Security group for Twitch Chat MCP Server'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access to MCP server'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/8
          Description: 'SSH access from private networks'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Parameter Store for configuration
  TwitchClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/twitch/client-id'
      Type: String
      Value: 'REPLACE_WITH_YOUR_CLIENT_ID'
      Description: 'Twitch OAuth Client ID'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  TwitchClientSecretParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/twitch/client-secret'
      Type: SecureString
      Value: 'REPLACE_WITH_YOUR_CLIENT_SECRET'
      Description: 'Twitch OAuth Client Secret'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  JWTSecretParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/jwt/secret'
      Type: SecureString
      Value: !Sub '${AWS::StackId}-${AWS::AccountId}-jwt-secret'
      Description: 'JWT signing secret'
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

Outputs:
  KMSKeyId:
    Description: 'KMS Key ID for credential encryption'
    Value: !Ref CredentialEncryptionKey
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyId'

  KMSKeyArn:
    Description: 'KMS Key ARN for credential encryption'
    Value: !GetAtt CredentialEncryptionKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'

  LogGroupName:
    Description: 'CloudWatch Log Group name'
    Value: !Ref MCPServerLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'

  ServerRoleArn:
    Description: 'IAM Role ARN for MCP Server'
    Value: !GetAtt MCPServerRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ServerRoleArn'

  InstanceProfileArn:
    Description: 'Instance Profile ARN for EC2'
    Value: !GetAtt MCPServerInstanceProfile.Arn
    Export:
      Name: !Sub '${AWS::StackName}-InstanceProfileArn'

  SecurityGroupId:
    Description: 'Security Group ID for MCP Server'
    Value: !Ref MCPServerSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  TwitchClientIdParameter:
    Description: 'Parameter Store path for Twitch Client ID'
    Value: !Ref TwitchClientIdParameter
    Export:
      Name: !Sub '${AWS::StackName}-TwitchClientIdParameter'

  TwitchClientSecretParameter:
    Description: 'Parameter Store path for Twitch Client Secret'
    Value: !Ref TwitchClientSecretParameter
    Export:
      Name: !Sub '${AWS::StackName}-TwitchClientSecretParameter'

  JWTSecretParameter:
    Description: 'Parameter Store path for JWT Secret'
    Value: !Ref JWTSecretParameter
    Export:
      Name: !Sub '${AWS::StackName}-JWTSecretParameter'
